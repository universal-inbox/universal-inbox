[application]
environment = "default"
listen_address = "0.0.0.0"
listen_port = 8000
# api_path must end with /
api_path = "/api/"
front_base_url = "http://localhost:8080"
# If `static_path` is specified, statics from `static_dir` will be served on `static_path`
# static_path = ""
min_sync_notifications_interval_in_minutes = 5
min_sync_tasks_interval_in_minutes = 5
# Disabled by default
# support_href = "mailto:support@universal-inbox.com"
show_changelog = false
dry_run = false

[application.email]
smtp_server = "smtp.example.com"
smtp_port = 465
smtp_username = "user"
smtp_password = "password"
from_header = "nobody <nobody@example.com>"
reply_to_header = "support <support@example.com>"

[application.security]
csp_extra_connect_src = []

# [application.security.authentication]
# type = "OpenIDConnect"
# oidc_issuer_url = "https://oidc.provider"
# oidc_api_client_id = "5678@universal_inbox"
# oidc_api_client_secret = "secret"
# user_profile_url = "https://oidc.provider/user"
#
# [application.security.authentication.oidc_flow_settings]
# type = "AuthorizationCodePKCEFlow"
# introspection_url = "" # TODO Is it required?
# front_client_id = "1234@universal_inbox"
#
# OR
#
# [application.security.authentication]
# type = "OpenIDConnect"
# oidc_issuer_url = "https://oidc.provider"
# oidc_api_client_id = "5678@universal_inbox"
# oidc_api_client_secret = "secret"
# user_profile_url = "https://oidc.provider/user"
#
# [application.security.authentication.oidc_flow_settings]
# type = "OIDCGoogleAuthorizationCodeFlow"
#
# OR
#
[application.security.authentication]
type = "Local"
# See OWASP recommendations https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
argon2_algorithm = "argon2id"
argon2_version = 19
argon2_memory_size = 20000
argon2_iterations = 2
argon2_parallelism = 1

[application.http_session]
# secret_key = ""
# Generate new JWT key pair using `just generate-jwt-key-pair`
jwt_secret_key = ""
jwt_public_key = ""
jwt_token_expiration_in_days = 30
max_age_days = 30

[application.observability.logging]
# See https://docs.rs/tracing-subscriber/latest/tracing_subscriber/struct.EnvFilter.html
log_directive = "info"
dependencies_log_level = "error"

# [application.observability.tracing]
# otlp_exporter_protocol = "Grpc" # or Http
# otlp_exporter_endpoint = "https://otlp.host"

# Depending on the OTLP provider, the header may be different or may not be
# required
# [application.observability.tracing.otlp_exporter_headers]
# api-key = "12345"

[database]
host = "127.0.0.1"
port = 5432
username = "postgres"
password = "password"
database_name = "universal-inbox"
use_tls = false
max_connections = 10

[redis]
host = "127.0.0.1"
port = 6379
use_tls = false

# tag: New notification integration
[integrations.github]
name = "Github"
kind = "Github"
nango_key = "github"
page_size = 50
required_oauth_scopes = ["notifications", "read:discussion", "read:org", "repo"]
doc = "Github notifications are synchronized 1 for 1 with Universal Inbox notifications."

[integrations.github.doc_for_actions]
delete = "The Github notification will only be marked as read. ⚠️ The Github notification API is not fully functional and does not allow to mark it as done."
unsubscribe = "Unsubscribe from the Github notification. No new update will be received until pinged again."
snooze = "The Github notification will not be modified. The notification in Universal Inbox will only reappear the next day."

[integrations.linear]
name = "Linear"
kind = "Linear"
nango_key = "linear"
required_oauth_scopes = ["read", "write"]
doc = """
Linear notifications (issue and project notifications) are synchronized 1 for 1 with Universal Inbox notifications. Linear notifications for the same Linear issue are not (yet) merged as one like Linear does.<br>

Assigned Linear issues can also be synchronized as a task in the task management service.

When an assigned Linear issue is synchronized as a task, the synchronization is two way:
- completed task will set the Linear issue as completed.
- and completed Linear issue will set the task as completed.
"""

[integrations.linear.doc_for_actions]
delete = "The Linear notification will be deleted."
unsubscribe = "Unsubscribe from the Linear notification. No new update will be received until pinged again. Only issue notifications can be unsubscribed, project notifications cannot be unsubscribed."
snooze = "The Linear notification will be snoozed and will only reappear the next day."

[integrations.google_mail]
name = "Google Mail"
kind = "GoogleMail"
nango_key = "google-mail"
page_size = 500
required_oauth_scopes = ["https://www.googleapis.com/auth/gmail.modify"]
doc = "Google Mail threads from your Inbox are considered as Universal Inbox notifications. More flexible configuration is coming."
warning_message = "Google Mail integration is not yet public, it requires your email address to be whitelisted and you will see a warning message from Google while connecting. If you still want to connect it, please send the Google email address you want to use to the <a href='mailto:support@universal-inbox.com' title='Contact support'>support</a>"

[integrations.google_mail.doc_for_actions]
delete = "The Google Mail thread will be archived."
unsubscribe = "The Google Mail thread will be archived. New messages in the thread will be ignored and automatically archived unless one unread message is directly addressed to your email address."
snooze = "Snoozing a notification will only be reflected in Universal Inbox. ⚠️ Google Mail has no public API to snooze a thread."

[integrations.todoist]
name = "Todoist"
kind = "Todoist"
nango_key = "todoist"
required_oauth_scopes = ["data:read_write", "data:delete"]
doc = "Tasks from the Todoist Inbox are considered as Universal Inbox notifications."

[integrations.todoist.doc_for_actions]
delete = "The Todoist task will be deleted."
complete = "The task associated with the notification (or the task from the Todoist inbox) will be marked as complete."
snooze = "The Todoist task will not be modified. The notification in Universal Inbox will only reappear the next day."

[integrations.slack]
name = "Slack"
kind = "Slack"
nango_key = "slack"
required_oauth_scopes = [
  "channels:history",
  "channels:read",
  "groups:history",
  "groups:read",
  "im:history",
  "im:read",
  "mpim:history",
  "mpim:read",
  "reactions:read",
  "reactions:write",
  "stars:read",
  "stars:write",
  "team:read",
  "usergroups:read",
  "users:read",
]
use_as_oauth_user_scopes = true
doc = """
Slack \"saved for later\" messages can be synchronized 1 for 1 with a Universal Inbox notification or a task in the task management service.

When synchronized as a task, the synchronization is two way:
- completed task will delete the \"saved for later\" mark in Slack.
- ⚠️ re-activated task will partially create the \"saved for later\" mark in Slack. Indeed, due to some Slack public API limitations, the Slack message will be marked again but it won't appear in the \"saved for later\" list.
"""

[integrations.slack.doc_for_actions]
delete = "The Slack \"saved for later\" item will be deleted."
unsubscribe = "The Slack \"saved for later\" item will be deleted."
snooze = "The notification will be snoozed and will only reappear the next day. It won't change the Slack \"saved for later\" item."

[integrations.ticktick]
name = "Tick Tick"
kind = "TickTick"
nango_key = "ticktick"
required_oauth_scopes = ["tasks:read", "tasks:write"]
doc = "This is still work in progress."

[integrations.ticktick.doc_for_actions]

[oauth2]
nango_base_url = "http://localhost:3003"
nango_public_key = "get it from Nango/project-settings page"
nango_secret_key = "To be generated"
